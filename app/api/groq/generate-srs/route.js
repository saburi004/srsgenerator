import Groq from "groq-sdk";
import { NextResponse } from "next/server";

// Initialize Groq client
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export async function POST(req) {
  try {
    const { prompt, theme } = await req.json();

    if (!prompt || !prompt.trim()) {
      return NextResponse.json(
        { success: false, error: "Prompt is required" },
        { status: 400 }
      );
    }

    // Create a detailed prompt for Groq
    const systemPrompt = `You are an expert software requirements analyst. Generate a comprehensive Software Requirements Specification (SRS) document based on the user's project description.

Return ONLY a valid JSON object (no markdown, no code blocks) with this exact structure:
{
  "title": "Project Name",
  "overview": "Detailed project overview (2-3 sentences)",
  "functionalRequirements": ["requirement 1", "requirement 2", ...],
  "nonFunctionalRequirements": ["requirement 1", "requirement 2", ...],
  "technicalStack": ["technology 1", "technology 2", ...],
  "optionalRequirements": [
    {
      "type": "functional",
      "description": "Optional feature description"
    },
    {
      "type": "non-functional",
      "description": "Optional requirement description"
    }
  ]
}

Guidelines:
- Generate 5-8 core functional requirements
- Generate 4-6 core non-functional requirements
- Suggest 3-5 optional requirements (mix of functional and non-functional)
- Make optional requirements truly optional enhancements
- Be specific and actionable
- Consider scalability, security, and user experience`;

    const userPrompt = `Project Description: ${prompt}\n\nColor Theme: ${theme}\n\nGenerate a comprehensive SRS document.`;

    // Call Groq API
    const completion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: userPrompt,
        },
      ],
      model: "llama-3.3-70b-versatile", // or "mixtral-8x7b-32768" or "llama-3.1-70b-versatile"
      temperature: 0.7,
      max_tokens: 2048,
    });

    const responseText = completion.choices[0]?.message?.content;

    if (!responseText) {
      return NextResponse.json(
        { success: false, error: "No response from AI" },
        { status: 500 }
      );
    }

    // Parse the JSON response
    let srsData;
    try {
      // Remove any markdown code blocks if present
      const cleanedResponse = responseText
        .replace(/```json\n?/g, "")
        .replace(/```\n?/g, "")
        .trim();
      
      srsData = JSON.parse(cleanedResponse);
    } catch (parseError) {
      console.error("JSON Parse Error:", parseError);
      console.error("Response Text:", responseText);
      
      return NextResponse.json(
        { 
          success: false, 
          error: "Failed to parse AI response",
          details: parseError.message 
        },
        { status: 500 }
      );
    }

    // Validate the structure
    if (!srsData.title || !srsData.functionalRequirements || !srsData.nonFunctionalRequirements) {
      return NextResponse.json(
        { success: false, error: "Invalid SRS structure from AI" },
        { status: 500 }
      );
    }

    // Ensure optionalRequirements exists
    if (!srsData.optionalRequirements) {
      srsData.optionalRequirements = [];
    }

    return NextResponse.json({
      success: true,
      srs: {
        title: srsData.title,
        overview: srsData.overview || "Generated by AI",
        functionalRequirements: srsData.functionalRequirements,
        nonFunctionalRequirements: srsData.nonFunctionalRequirements,
        technicalStack: srsData.technicalStack || [],
      },
      optionalRequirements: srsData.optionalRequirements,
    });

  } catch (error) {
    console.error("Groq API Error:", error);
    
    if (error.message?.includes("API key")) {
      return NextResponse.json(
        { success: false, error: "Invalid or missing Groq API key" },
        { status: 401 }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: "Failed to generate SRS",
        details: error.message 
      },
      { status: 500 }
    );
  }
}

// Optional: GET method for testing
export async function GET() {
  return NextResponse.json({
    success: false,
    error: "Use POST method to generate SRS",
  }, { status: 405 });
}